fcfs


#include <stdio.h>

struct process{
    int pid, at, bt, tat, wt, ct;
};

int main(){
    struct process p[100],temp;
    int i, j, k, n, ct;
    printf("Enter the number of process: ");
    scanf("%d", &n);

    for (i=0;i<n;i++){
        p[i].pid = i;
        printf("Enter the arrival time of process %d: ",i);
        scanf("%d",&p[i].at);
        printf("Enter the Burst time of process %d: ",i);
        scanf("%d",&p[i].bt);
    }

    for(i=0;i<n-1;i++){
        for(j=0;j<n-i-1;i++){
        if(p[j].at>p[j+1].at){
            temp = p[j];
            p[j] = p[j+1];
            p[j+1]= temp; }
p[0].ct = p[0].at + p[0].bt;
p[0].tat = p[0].ct - p[0].at;
p[0].wt = p[0].tat - p[0].bt;  }}
for(i=1; i<n; i++){
    ct= p[i-1].ct;
    if(p[i].at>ct){
        p[i].ct = p[i].at + p[i].bt;
    }
    else {
        p[i].ct = ct +p[i].bt;
    }
    p[i].tat = p[i].ct - p[i].at;
    p[i].wt = p[i].tat - p[i].bt;
}
printf("process id\t, Arrival Time\t, Burst TIme\t, Completion time\t Turn Around\t Waiting  Time\t");
for(i =0; i<n; i++){
printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
}
return 0;
}

sjf

#include <stdio.h>

int main(){
    int n, i, j, bt[100], wt[100], tat[100], twt = 0, ttat = 0, temp;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for(i = 0; i < n; i++){
        printf("Enter the burst time for P%d: ", i);
        scanf("%d", &bt[i]);
    }

    // Sort burst times for SJF
    for(i = 0; i < n - 1; i++){
        for(j = 0; j < n - i - 1; j++){
            if(bt[j] > bt[j + 1]){
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time
    wt[0] = 0;  // First process has no waiting time
    for(i = 1; i < n; i++){
        wt[i] = wt[i - 1] + bt[i - 1];
    }

    for(i = 0; i < n; i++){
        tat[i] = wt[i] + bt[i];
    }

    // Totals
    for(i = 0; i < n; i++){
        ttat += tat[i];
        twt += wt[i];
    }

    // Output
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for(i = 0; i < n; i++){
        printf("P%d\t\t%d\t\t%d\t\t%d\n", i, bt[i], wt[i], tat[i]);
    }

    // Averages
    float avg_wt = (float)twt / n;
    float avg_tat = (float)ttat / n;

    printf("\nTotal Waiting Time: %d", twt);
    printf("\nTotal Turnaround Time: %d", ttat);
    printf("\nAverage Waiting Time: %.2f", avg_wt);
    printf("\nAverage Turnaround Time: %.2f\n", avg_tat);

    return 0;
}


round robin

#include <stdio.h>

int main(){
    int n, bt[100], rt[100], wt[100], tat[100], q, t = 0, i, done, twt = 0, ttat = 0;
    printf("Enter the number of Processes:");
    scanf("%d", &n);

    for(i=0;i<n;i++){
        printf("Enter the burst time:");
        scanf("%d", &bt[i]);
        rt[i] = bt[i];
    }

    printf("Enter the time quatum: ");
    scanf("%d",&q);

    do{
        done = 1;
        for(i=0;i<n;i++){
            if (rt[i]>0){
                done =0;
                if(rt[i]>q){
                    t += q;
                    rt[i] -= q;
                }
                else{
                    t += rt[i];
                    wt[i] = t - bt[i];
                    rt[i]=0;
                }

            }
        }
    } while (!done);

    for(i=0;i<n;i++){
        tat[i] = bt[i] + wt[i];
        twt += wt[i];
        ttat += tat[i];
    }

    printf("Process\t Burst TIme\t Waiting time \t Turnaround time \n");
    for(i=0;i<n;i++){
        printf("%d\t%d\t\t%d\t\t%d\n",i,bt[i],wt[i],tat[i]);
    }
    printf("\nTotal Waiting Time: %d", twt);
    printf("\nTotal Turnaround Time: %d", ttat);
    printf("\nAverage Waiting Time: %.2f", (float)twt / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)ttat / n);
}


priority

#include <stdio.h>

int main() {
    int n, pid[100], priority[100], burst[100], waiting[100], turnaround[100];
    float total_wt = 0, total_tt = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Input burst time and priority
    for (int i = 0; i < n; i++) {
        pid[i] = i;
        printf("Enter Priority for P%d: ", i);
        
        scanf("%d", &priority[i]);
        printf("Enter Burst Time for P%d: ", i);
        scanf("%d", &burst[i]);
    }

    // Sort based on priority (lower number = higher priority)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (priority[j] > priority[j + 1]) {
                // Swap priority
                int temp = priority[j];
                priority[j] = priority[j + 1];
                priority[j + 1] = temp;

                // Swap burst time
                temp = burst[j];
                burst[j] = burst[j + 1];
                burst[j + 1] = temp;

                // Swap process ID
                temp = pid[j];
                pid[j] = pid[j + 1];
                pid[j + 1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time
    waiting[0] = 0;
    turnaround[0] = burst[0];
    for (int i = 1; i < n; i++) {
        waiting[i] = waiting[i - 1] + burst[i - 1];
        turnaround[i] = waiting[i] + burst[i];
    }

    // Print table
    printf("\nProcess\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", pid[i], priority[i], burst[i], waiting[i], turnaround[i]);
        total_wt += waiting[i];
        total_tt += turnaround[i];
    }

    // Gantt Chart
    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        printf("| P%d ", pid[i]);
    }
    printf("|\n0");
    int time = 0;
    for (int i = 0; i < n; i++) {
        time += burst[i];
        printf("   %d", time);
    }

    // Averages
    printf("\n\nAverage Waiting Time: %.2f ms\n", total_wt / n);
    printf("Average Turnaround Time: %.2f ms\n", total_tt / n);

    return 0;
}


bankers

#include <stdio.h>

int a[30][30], m[30][30], n[30][30], v[30], av[30], s[30], dav[30];
int i, j, k, p, r, ind = 0;

void main() {
    printf("Enter the number of processes: ");
    scanf("%d", &p);
    printf("Enter the number of resources: ");
    scanf("%d", &r);

    printf("Enter the allocation matrix:\n");
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            scanf("%d", &a[i][j]);

    printf("Enter the max allocation matrix:\n");
    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            scanf("%d", &m[i][j]);

    for (i = 0; i < p; i++)
        for (j = 0; j < r; j++)
            n[i][j] = m[i][j] - a[i][j];

    printf("Enter the available resources: ");
    for (i = 0; i < r; i++) {
        scanf("%d", &av[i]);
        dav[i] = av[i];
    }

    for (i = 0; i < p; i++)
        v[i] = 0;

    // Safe sequence check
    for (k = 0; k < p; k++) {
        for (i = 0; i < p; i++) {
            if (v[i] == 0) {
                int flag = 0;
                for (j = 0; j < r; j++)
                    if (n[i][j] > av[j]) {
                        flag = 1;
                        break;
                    }

                if (flag == 0) {
                    v[i] = 1;
                    s[ind++] = i;
                    for (int x = 0; x < r; x++)
                        av[x] += a[i][x];
                }
            }
        }
    }

    int flag = 1;
    for (i = 0; i < p; i++)
        if (v[i] == 0) {
            flag = 0;
            printf("Not a safe sequence\n");
            return;
        }

    printf("Safe sequence: ");
    for (i = 0; i < p - 1; i++)
        printf("P%d -> ", s[i]);
    printf("P%d\n", s[i]);

    // Handle request
    int req, new[r];
    printf("Enter request process: ");
    scanf("%d", &req);
    printf("Enter the resource request: ");
    for (i = 0; i < r; i++)
        scanf("%d", &new[i]);

    for (j = 0; j < r; j++) {
        if (new[j] > n[req][j]) {
            printf("Error: Request exceeds need.\n");
            return;
        }
    }

    for (i = 0; i < r; i++) {
        a[req][i] += new[i];
        n[req][i] -= new[i];
        av[i] -= new[i];
    }

    printf("Updated Available Resources: ");
    for (i = 0; i < r; i++)
        printf("%d ", av[i]);
    printf("\n");

    // Re-check safe sequence
    for (i = 0; i < p; i++)
        v[i] = 0;
    ind = 0;

    for (k = 0; k < p; k++) {
        for (i = 0; i < p; i++) {
            if (v[i] == 0) {
                int flag = 0;
                for (j = 0; j < r; j++)
                    if (n[i][j] > av[j]) {
                        flag = 1;
                        break;
                    }

                if (flag == 0) {
                    v[i] = 1;
                    s[ind++] = i;
                    for (int x = 0; x < r; x++)
                        av[x] += a[i][x];
                }
            }
        }
    }

    flag = 1;
    for (i = 0; i < p; i++)
        if (v[i] == 0) {
            flag = 0;
            printf("Not a safe sequence\n");
            return;
        }

    printf("New Safe sequence: ");
    for (i = 0; i < p - 1; i++)
        printf("P%d -> ", s[i]);
    printf("P%d\n", s[i]);
}



page replacement

#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10
#define MAX_PAGES 30

// FIFO Page Replacement
void fifo(int pages[], int n, int capacity) {
    int frames[MAX_FRAMES];
    int index = 0, faults = 0;

    // Initialize all frames to -1 (empty)
    for (int i = 0; i < capacity; i++) frames[i] = -1;

    for (int i = 0; i < n; i++) {
        int found = 0;

        // Check if page is already in frame
        for (int j = 0; j < capacity; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        // If not found, insert it (FIFO style)
        if (!found) {
            frames[index] = pages[i];
            index = (index + 1) % capacity;
            faults++;
        }
    }

    printf("FIFO Page Faults: %d\n", faults);
}

// Optimal Page Replacement
void optimal(int pages[], int n, int capacity) {
    int frames[MAX_FRAMES];
    int faults = 0;

    for (int i = 0; i < capacity; i++) frames[i] = -1;

    for (int i = 0; i < n; i++) {
        int found = 0;

        for (int j = 0; j < capacity; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            int index = -1, farthest = i;

            // Find the page not used for the longest in future
            for (int j = 0; j < capacity; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frames[j] == pages[k]) break;
                }

                if (k == n) {
                    index = j;
                    break;
                }

                if (k > farthest) {
                    farthest = k;
                    index = j;
                }
            }

            if (index == -1) index = 0;

            frames[index] = pages[i];
            faults++;
        }
    }

    printf("Optimal Page Faults: %d\n", faults);
}

// LRU Page Replacement
void lru(int pages[], int n, int capacity) {
    int frames[MAX_FRAMES], time[MAX_FRAMES];
    int counter = 0, faults = 0;

    for (int i = 0; i < capacity; i++) {
        frames[i] = -1;
        time[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int found = 0;

        for (int j = 0; j < capacity; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                counter++;
                time[j] = counter; // Update recent use time
                break;
            }
        }

        if (!found) {
            int lru = 0;

            for (int j = 1; j < capacity; j++) {
                if (time[j] < time[lru]) {
                    lru = j;
                }
            }

            frames[lru] = pages[i];
            counter++;
            time[lru] = counter;
            faults++;
        }
    }

    printf("LRU Page Faults: %d\n", faults);
}

// Main Function
int main() {
    int pages[MAX_PAGES], n, capacity;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &capacity);

    fifo(pages, n, capacity);
    optimal(pages, n, capacity);
    lru(pages, n, capacity);

    return 0;
}



disk scheduling

#include <stdio.h>
#include <stdlib.h>

void fcfs(int requests[], int n, int head) {
    int seek_count = 0;
    int distance, cur_track;
    for (int i = 0; i < n; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }
    printf("FCFS Total Seek Count: %d\n", seek_count);
}

void sstf(int requests[], int n, int head) {
    int seek_count = 0;
    int distance, cur_track;
    int completed[n];
    for (int i = 0; i < n; i++)
        completed[i] = 0;
    for (int i = 0; i < n; i++) {
        int min = 10000, index = -1;
        for (int j = 0; j < n; j++) {
            if (!completed[j]) {
                distance = abs(requests[j] - head);
                if (distance < min) {
                    min = distance;
                    index = j;
                }
            }
        }
        seek_count += min;
        head = requests[index];
        completed[index] = 1;
    }
    printf("SSTF Total Seek Count: %d\n", seek_count);
}

void scan(int requests[], int n, int head, int disk_size) {
    int seek_count = 0;
    int distance, cur_track;

    // Sort requests
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) {
        if (requests[index] > head) break;
    }

    for (int i = index; i < n; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    seek_count += abs(disk_size - 1 - head);
    head = disk_size - 1;

    for (int i = index - 1; i >= 0; i--) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    printf("SCAN Total Seek Count: %d\n", seek_count);
}

void cscan(int requests[], int n, int head, int disk_size) {
    int seek_count = 0;
    int distance, cur_track;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) {
        if (requests[index] > head) break;
    }

    for (int i = index; i < n; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance; 
        head = cur_track;
    }

    seek_count += abs(disk_size - 1 - head);
    head = 0;
    seek_count += disk_size - 1;

    for (int i = 0; i < index; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    printf("CSCAN Total Seek Count: %d\n", seek_count);
}

void look(int requests[], int n, int head) {
    int seek_count = 0;
    int distance, cur_track;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) {
        if (requests[index] > head) break;
    }

    for (int i = index; i < n; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    for (int i = index - 1; i >= 0; i--) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    printf("LOOK Total Seek Count: %d\n", seek_count);
}

void clook(int requests[], int n, int head) {
    int seek_count = 0;
    int distance, cur_track;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    int index;
    for (index = 0; index < n; index++) {
        if (requests[index] > head) break;
    }

    for (int i = index; i < n; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    for (int i = 0; i < index; i++) {
        cur_track = requests[i];
        distance = abs(cur_track - head);
        seek_count += distance;
        head = cur_track;
    }

    printf("CLOOK Total Seek Count: %d\n", seek_count);
}

int main() {
    int n, head, disk_size;
    int requests[100];
    printf("Enter the number of requests: ");
    scanf("%d", &n);
    printf("Enter the request queue: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }
    printf("Enter the initial head position: ");
    scanf("%d", &head);
    printf("Enter the disk size: ");
    scanf("%d", &disk_size);

    fcfs(requests, n, head);
    sstf(requests, n, head);
    scan(requests, n, head, disk_size);
    cscan(requests, n, head, disk_size);
    look(requests, n, head);
    clook(requests, n, head);

    return 0;
}


memory alloc


#include <stdio.h>
#include <stdlib.h>

void first(int mem[], int pro[], int m, int p) {
    int a[100], b[100];
    int flag1[100], flag2[100];

    for (int i = 0; i < m; i++) {
        a[i] = mem[i];
        flag1[i] = 0;
    }
    for (int i = 0; i < p; i++) {
        b[i] = pro[i];
        flag2[i] = 0;
    }

    printf("\nFirst Fit\n");
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < m; j++) {
            if (a[j] >= b[i] && flag1[j] != 1 && flag2[i] != 1) {
                printf("Process %d is allocated to block %d, Wastage = %d\n", b[i], a[j], a[j] - b[i]);
                flag1[j] = 1;
                flag2[i] = 1;
                break;
            }
        }
        if (flag2[i] == 0) {
            printf("Process %d could not be allocated\n", b[i]);
        }
    }
}

void best(int mem[], int pro[], int m, int p) {
    int a[100], b[100];
    int flag1[100], flag2[100];

    for (int i = 0; i < m; i++) {
        a[i] = mem[i];
        flag1[i] = 0;
    }
    for (int i = 0; i < p; i++) {
        b[i] = pro[i];
        flag2[i] = 0;
    }

    // Sort memory blocks in ascending order
    int temp;
    for (int i = 0; i < m - 1; i++) {
        for (int j = 0; j < m - i - 1; j++) {
            if (a[j] > a[j + 1]) {
                temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp;
            }
        }
    }

    printf("\nBest Fit\n");
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < m; j++) {
            if (a[j] >= b[i] && flag1[j] != 1 && flag2[i] != 1) {
                printf("Process %d is allocated to block %d, Wastage = %d\n", b[i], a[j], a[j] - b[i]);
                flag1[j] = 1;
                flag2[i] = 1;
                break;
            }
        }
        if (flag2[i] == 0) {
            printf("Process %d could not be allocated\n", b[i]);
        }
    }
}

void worst(int mem[], int pro[], int m, int p) {
    int a[100], b[100];
    int flag1[100], flag2[100];

    for (int i = 0; i < m; i++) {
        a[i] = mem[i];
        flag1[i] = 0;
    }
    for (int i = 0; i < p; i++) {
        b[i] = pro[i];
        flag2[i] = 0;
    }

    // Sort memory blocks in descending order
    int temp;
    for (int i = 0; i < m - 1; i++) {
        for (int j = 0; j < m - i - 1; j++) {
            if (a[j] < a[j + 1]) {
                temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp;
            }
        }
    }

    printf("\nWorst Fit\n");
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < m; j++) {
            if (a[j] >= b[i] && flag1[j] != 1 && flag2[i] != 1) {
                printf("Process %d is allocated to block %d, Wastage = %d\n", b[i], a[j], a[j] - b[i]);
                flag1[j] = 1;
                flag2[i] = 1;
                break;
            }
        }
        if (flag2[i] == 0) {
            printf("Process %d could not be allocated\n", b[i]);
        }
    }
}

int main() {
    int process[100], memory[100], mloc, ploc;

    printf("Enter total number of memory blocks: ");
    scanf("%d", &mloc);
    for (int i = 0; i < mloc; i++) {
        printf("Enter size of Memory Block %d: ", i + 1);
        scanf("%d", &memory[i]);
    }

    printf("Enter total number of processes: ");
    scanf("%d", &ploc);
    for (int j = 0; j < ploc; j++) {
        printf("Enter size of Process %d: ", j + 1);
        scanf("%d", &process[j]);
    }

    first(memory, process, mloc, ploc);
    best(memory, process, mloc, ploc);
    worst(memory, process, mloc, ploc);

    return 0;
}

